{"version":3,"sources":["components/Loader/Loader.jsx","components/Post/Post.jsx","api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Comment/Comment.jsx","components/PostDetails/PostDetails.jsx","components/Select/Select.jsx","App.jsx","index.js"],"names":["Loader","className","Post","title","userId","onChangeUserId","selectedPostId","onResetUserId","id","hidden","type","onClick","defaultProps","BASE_URL","getUserPosts","a","fetch","response","json","result","data","getPostDetails","postId","PostsList","selectedUser","useState","users","setUsers","isLoading","setIsLoading","useEffect","filter","post","length","map","user","key","getPostComments","remove","url","options","then","request","method","NewCommentForm","onRefreshComment","firstName","setFirstName","email","setEmail","body","setBody","setValue","event","target","value","name","onSubmit","preventDefault","headers","JSON","stringify","addComment","onChange","placeholder","Comment","comment","commentId","PostDetails","isVisible","setIsVisible","postDetail","setPostDetail","postComment","setPostComment","refreshComment","prev","detailsData","fetchData","commentsData","Select","onSelectUser","App","setSelectedUser","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22004c92.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function Post({\n  title,\n  userId,\n  onChangeUserId,\n  selectedPostId,\n  onResetUserId,\n  id,\n\n}) {\n  return (\n    <li className=\"PostsList__item\">\n      <div>\n        <b>{`[User #${userId}]: `}</b>\n        {title}\n      </div>\n      <button\n        hidden={id === selectedPostId}\n        type=\"button\"\n        className=\"PostsList__button button hidden\"\n        onClick={() => onChangeUserId(id)}\n      >\n        Open\n      </button>\n      <button\n        hidden={id !== selectedPostId}\n        type=\"button\"\n        className=\"PostsList__button button\"\n        onClick={onResetUserId}\n      >\n        Close\n      </button>\n    </li>\n  );\n}\n\nPost.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  userId: PropTypes.number,\n  onChangeUserId: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  onResetUserId: PropTypes.func.isRequired,\n};\n\nPost.defaultProps = {\n  title: '',\n  userId: null,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async() => {\n  const response = await fetch(`${BASE_URL}/posts`);\n  const result = await response.json();\n  const { data } = result;\n\n  return data;\n};\n\nexport const getPostDetails = async(postId) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const result = await response.json();\n  const { data } = result;\n\n  return data;\n};\n","import PropTypes from 'prop-types';\n\nimport React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Post } from '../Post';\nimport { getUserPosts } from '../../api/posts';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  selectedUser,\n  onChangeUserId,\n  selectedPostId,\n  onResetUserId,\n}) => {\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    (async() => {\n      const data = await getUserPosts();\n\n      if (selectedUser) {\n        setUsers(data.filter(post => selectedUser === post.userId));\n        setIsLoading(false);\n\n        return;\n      }\n\n      setUsers(data);\n      setIsLoading(false);\n    })();\n  }, [selectedUser]);\n\n  if (isLoading) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {users.length && users.map(user => (\n          <Post\n            key={user.id}\n            id={user.id}\n            title={user.title}\n            userId={user.userId}\n            onChangeUserId={onChangeUserId}\n            selectedPostId={selectedPostId}\n            onResetUserId={onResetUserId}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  selectedUser: PropTypes.number.isRequired,\n  onChangeUserId: PropTypes.func.isRequired,\n  onResetUserId: PropTypes.func.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async(id) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${id}`);\n  const result = await response.json();\n\n  return result.data;\n};\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then(response => response.json())\n  .then(result => result.data);\n\nconst remove = url => request(url, { method: 'DELETE' });\n\nexport const deleteComment = commentId => remove(`/comments/${commentId}`);\n\nexport const addComment = (name, email, body, postId) => fetch(\n  `${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      name,\n      email,\n      body,\n      postId,\n    }),\n  },\n);\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\nimport { addComment } from '../../api/comments';\n\nexport function NewCommentForm({ postId, onRefreshComment }) {\n  const [firstName, setFirstName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const setValue = (event) => {\n    const { value, name } = event.target;\n\n    switch (name) {\n      case 'name':\n        setFirstName(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      default:\n        setBody(value);\n    }\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    addComment(firstName, email, body, postId);\n    setFirstName('');\n    setEmail('');\n    setBody('');\n    onRefreshComment();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={firstName}\n          onChange={setValue}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={setValue}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={setValue}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n}\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  onRefreshComment: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { deleteComment } from '../../api/comments';\n\nexport function Comment({ comment, onRefreshComment }) {\n  const onDeleteComment = () => {\n    deleteComment(comment.id);\n    onRefreshComment();\n  };\n\n  return (\n    <li\n      className=\"PostDetails__list-item\"\n    >\n      <button\n        type=\"button\"\n        className=\"PostDetails__remove-button button\"\n        onClick={onDeleteComment}\n      >\n        X\n      </button>\n      <p>{comment.body}</p>\n    </li>\n  );\n}\n\nComment.propTypes = {\n  onRefreshComment: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comment } from '../Comment';\nimport { Loader } from '../Loader';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\n\nimport './PostDetails.scss';\n\nexport function PostDetails({\n  selectedPostId,\n}) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n  const [postDetail, setPostDetail] = useState(null);\n  const [postComment, setPostComment] = useState(null);\n  const setVisibility = () => setIsVisible(!isVisible);\n\n  const refreshComment = () => setPostComment(prev => [...prev]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    async function fetchData() {\n      const detailsData = await getPostDetails(selectedPostId);\n\n      setPostDetail(detailsData);\n      setIsLoading(false);\n    }\n\n    fetchData();\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const commentsData = await getPostComments(selectedPostId);\n\n      setPostComment(commentsData);\n    }\n\n    fetchData();\n  }, [selectedPostId, postComment]);\n\n  return (\n    <div className=\"PostDetails\">\n      {(isLoading && selectedPostId) && <Loader />}\n      {\n        (postDetail && (\n        <>\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{postDetail.title}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={setVisibility}\n            >\n              Hide\n              {' '}\n              {postComment && postComment.length}\n              {' '}\n              comments\n            </button>\n\n            <ul\n              className=\"PostDetails__list\"\n              hidden={isVisible}\n            >\n              {postComment && postComment.map(comment => (\n                <Comment\n                  key={comment.id}\n                  comment={comment}\n                  onRefreshComment={refreshComment}\n                />\n              ))}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={selectedPostId}\n                onRefreshComment={refreshComment}\n              />\n            </div>\n          </section>\n        </>\n        ))\n      }\n    </div>\n  );\n}\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function Select({\n  value,\n  onSelectUser,\n}) {\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        value={value}\n        className=\"App__user-selector\"\n        onChange={onSelectUser}\n      >\n        <option value=\"0\">All users</option>\n        <option value=\"1\">Leanne Graham</option>\n        <option value=\"2\">Ervin Howell</option>\n        <option value=\"3\">Clementine Bauch</option>\n        <option value=\"4\">Patricia Lebsack</option>\n        <option value=\"5\">Chelsey Dietrich</option>\n        <option value=\"6\">Mrs. Dennis Schulist</option>\n        <option value=\"7\">Kurtis Weissnat</option>\n        <option value=\"8\">Nicholas Runolfsdottir V</option>\n        <option value=\"9\">Glenna Reichert</option>\n        <option value=\"10\">Leanne Graham</option>\n      </select>\n    </label>\n  );\n}\n\nSelect.propTypes = {\n  onSelectUser: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Select } from './components/Select';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nexport const App = () => {\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n\n  const selectUser = event => setSelectedUser(+event.target.value);\n  const selectUserId = id => setSelectedPostId(id);\n  const resetUserId = () => setSelectedPostId(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <Select\n          value={selectedUser}\n          onSelectUser={selectUser}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            onChangeUserId={selectUserId}\n            selectedPostId={selectedPostId}\n            onResetUserId={resetUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}