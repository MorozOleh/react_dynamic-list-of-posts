{"version":3,"sources":["components/Loader/Loader.jsx","components/Post/Post.jsx","api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Comment/Comment.jsx","components/PostDetails/PostDetails.jsx","components/Select/Select.jsx","App.jsx","index.js"],"names":["Loader","className","Post","title","userId","onChangeUserId","selectedPostId","onResetUserId","id","hidden","type","onClick","defaultProps","BASE_URL","getUserPosts","a","fetch","response","json","result","data","getPostDetails","postId","PostsList","selectedUser","useState","users","setUsers","isLoading","setIsLoading","useEffect","filter","post","length","map","user","key","getPostComments","remove","url","options","then","request","method","addComment","name","email","body","headers","JSON","stringify","NewCommentForm","onUpdateComments","firstName","setFirstName","setEmail","setBody","setValue","useCallback","event","target","value","onSubmit","preventDefault","onChange","placeholder","Comment","comment","onDeleteComment","commentId","PostDetails","isVisible","setIsVisible","postDetail","setPostDetail","postComment","setPostComment","setVisibility","updateComments","Promise","all","detailsData","commentsData","fetchData","Select","onSelectUser","App","setSelectedUser","setSelectedPostId","selectUser","selectUserId","resetUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7578057.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function Post({\n  title,\n  userId,\n  onChangeUserId,\n  selectedPostId,\n  onResetUserId,\n  id,\n}) {\n  return (\n    <li className=\"PostsList__item\">\n      <div>\n        <b>{`[User #${userId}]: `}</b>\n        {title}\n      </div>\n      <button\n        hidden={id === selectedPostId}\n        type=\"button\"\n        className=\"PostsList__button button hidden\"\n        onClick={() => onChangeUserId(id)}\n      >\n        Open\n      </button>\n      <button\n        hidden={id !== selectedPostId}\n        type=\"button\"\n        className=\"PostsList__button button\"\n        onClick={onResetUserId}\n      >\n        Close\n      </button>\n    </li>\n  );\n}\n\nPost.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  userId: PropTypes.number,\n  onChangeUserId: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  onResetUserId: PropTypes.func.isRequired,\n};\n\nPost.defaultProps = {\n  title: '',\n  userId: null,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async() => {\n  const response = await fetch(`${BASE_URL}/posts`);\n  const result = await response.json();\n  const { data } = result;\n\n  return data;\n};\n\nexport const getPostDetails = async(postId) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const result = await response.json();\n  const { data } = result;\n\n  return data;\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Post } from '../Post';\nimport { getUserPosts } from '../../api/posts';\n\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  selectedUser,\n  onChangeUserId,\n  selectedPostId,\n  onResetUserId,\n}) => {\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    (async() => {\n      const data = await getUserPosts();\n\n      if (selectedUser) {\n        setUsers(data.filter(post => selectedUser === post.userId));\n        setIsLoading(false);\n\n        return;\n      }\n\n      setUsers(data);\n      setIsLoading(false);\n    })();\n  }, [selectedUser]);\n\n  if (isLoading) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {users.length && users.map(user => (\n          <Post\n            key={user.id}\n            id={user.id}\n            title={user.title}\n            userId={user.userId}\n            onChangeUserId={onChangeUserId}\n            selectedPostId={selectedPostId}\n            onResetUserId={onResetUserId}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  selectedUser: PropTypes.number.isRequired,\n  onChangeUserId: PropTypes.func.isRequired,\n  onResetUserId: PropTypes.func.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async(id) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${id}`);\n  const result = await response.json();\n\n  return result.data;\n};\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then(response => response.json())\n  .then(result => result.data);\n\nconst remove = url => request(url, { method: 'DELETE' });\n\nexport const deleteComment = commentId => remove(`/comments/${commentId}`);\n\nexport const addComment = (name, email, body, postId) => fetch(\n  `${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      name,\n      email,\n      body,\n      postId,\n    }),\n  },\n);\n","import React, { useState, useCallback } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\nimport { addComment, getPostComments } from '../../api/comments';\n\nexport function NewCommentForm({\n  postId,\n  onUpdateComments,\n  selectedPostId,\n}) {\n  const [firstName, setFirstName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const setValue = useCallback((event) => {\n    const { value, name } = event.target;\n\n    switch (name) {\n      case 'name':\n        setFirstName(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      default:\n        setBody(value);\n    }\n  }, []);\n\n  const onSubmit = useCallback(async(event) => {\n    event.preventDefault();\n    await addComment(firstName, email, body, postId);\n    await getPostComments(selectedPostId)\n      .then(onUpdateComments);\n\n    setFirstName('');\n    setEmail('');\n    setBody('');\n  });\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={firstName}\n          onChange={setValue}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={setValue}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={setValue}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n}\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  onUpdateComments: PropTypes.func.isRequired,\n};\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { deleteComment, getPostComments } from '../../api/comments';\n\nexport function Comment({ comment, onUpdateComments, selectedPostId }) {\n  const onDeleteComment = useCallback(async() => {\n    await deleteComment(comment.id);\n    await getPostComments(selectedPostId)\n      .then(onUpdateComments);\n  }, []);\n\n  return (\n    <li\n      className=\"PostDetails__list-item\"\n    >\n      <button\n        type=\"button\"\n        className=\"PostDetails__remove-button button\"\n        onClick={onDeleteComment}\n      >\n        X\n      </button>\n      <p>{comment.body}</p>\n    </li>\n  );\n}\n\nComment.propTypes = {\n  onUpdateComments: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  comment: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comment } from '../Comment';\nimport { Loader } from '../Loader';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\n\nimport './PostDetails.scss';\n\nexport function PostDetails({\n  selectedPostId,\n}) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n  const [postDetail, setPostDetail] = useState(null);\n  const [postComment, setPostComment] = useState(null);\n\n  const setVisibility = useCallback(() => setIsVisible(!isVisible), []);\n  const updateComments = useCallback(setPostComment, []);\n\n  useEffect(() => {\n    setIsLoading(true);\n    async function fetchData() {\n      const [detailsData, commentsData] = await Promise.all([\n        getPostDetails(selectedPostId),\n        getPostComments(selectedPostId),\n      ]);\n\n      setPostDetail(detailsData);\n      setPostComment(commentsData);\n      setIsLoading(false);\n    }\n\n    fetchData();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      {(isLoading && !!selectedPostId) && <Loader />}\n      {\n        (postDetail && (\n        <>\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{postDetail.title}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={setVisibility}\n            >\n              {`Hide ${postComment && postComment.length} comments`}\n            </button>\n\n            <ul\n              className=\"PostDetails__list\"\n              hidden={isVisible}\n            >\n              {postComment && postComment.map(comment => (\n                <Comment\n                  key={comment.id}\n                  comment={comment}\n                  selectedPostId={selectedPostId}\n                  onUpdateComments={updateComments}\n                />\n              ))}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={selectedPostId}\n                onUpdateComments={updateComments}\n                selectedPostId={selectedPostId}\n              />\n            </div>\n          </section>\n        </>\n        ))\n      }\n    </div>\n  );\n}\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function Select({\n  value,\n  onSelectUser,\n}) {\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        value={value}\n        className=\"App__user-selector\"\n        onChange={onSelectUser}\n      >\n        <option value=\"0\">All users</option>\n        <option value=\"1\">Leanne Graham</option>\n        <option value=\"2\">Ervin Howell</option>\n        <option value=\"3\">Clementine Bauch</option>\n        <option value=\"4\">Patricia Lebsack</option>\n        <option value=\"5\">Chelsey Dietrich</option>\n        <option value=\"6\">Mrs. Dennis Schulist</option>\n        <option value=\"7\">Kurtis Weissnat</option>\n        <option value=\"8\">Nicholas Runolfsdottir V</option>\n        <option value=\"9\">Glenna Reichert</option>\n        <option value=\"10\">Leanne Graham</option>\n      </select>\n    </label>\n  );\n}\n\nSelect.propTypes = {\n  onSelectUser: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Select } from './components/Select';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nexport const App = () => {\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectUser = useCallback(\n    event => setSelectedUser(+event.target.value), [],\n  );\n  const selectUserId = useCallback(id => setSelectedPostId(id), []);\n  const resetUserId = useCallback(() => setSelectedPostId(0), []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <Select\n          value={selectedUser}\n          onSelectUser={selectUser}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            onChangeUserId={selectUserId}\n            selectedPostId={selectedPostId}\n            onResetUserId={resetUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}